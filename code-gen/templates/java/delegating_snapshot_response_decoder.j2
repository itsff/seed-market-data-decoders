/*

 ######   #######  ########  ########          ######   ######## ##    ##
##    ## ##     ## ##     ## ##               ##    ##  ##       ###   ##
##       ##     ## ##     ## ##               ##        ##       ####  ##
##       ##     ## ##     ## ######   ####### ##   #### ######   ## ## ##
##       ##     ## ##     ## ##               ##    ##  ##       ##  ####
##    ## ##     ## ##     ## ##               ##    ##  ##       ##   ###
 ######   #######  ########  ########          ######   ######## ##    ##

  Notice: This file has been generated from a template. Do not modify.

*/

package com.seedcx.marketdata;

import com.seedcx.marketdata.msg.SnapshotMessageHeader;
import com.seedcx.marketdata.msg.AddOrder;
import org.jetbrains.annotations.NotNull;

public class DelegatingSnapshotResponseDecoder
    extends com.seedcx.marketdata.SnapshotResponseDecoder
{
    public interface Listener
    {
        void
        onMessageHeader (
            @NotNull SnapshotMessageHeader messageHeader);

        void
        onUnknownMessage (
            @NotNull SnapshotMessageHeader messageHeader);

        void
        onOrder (
            long orderNumber,
            long totalOrderCount,
            @NotNull SnapshotMessageHeader messageHeader,
            @NotNull SnapshotSuccessResponse response,
            @NotNull AddOrder order);

        {% for msg in messages %}
        void
        on{{ msg.name | pascal }} (
            @NotNull SnapshotMessageHeader messageHeader,
            @NotNull com.seedcx.marketdata.msg.{{ msg.name | pascal }} msg);

        {% endfor %}
    }

    private final @NotNull Listener listener;

    public
    DelegatingSnapshotResponseDecoder (
        @NotNull Listener listener)
    {
        this.listener = listener;
    }

    @Override
    protected void
    onMessageHeader (
        @NotNull SnapshotMessageHeader messageHeader)
    {
        this.listener.onMessageHeader(messageHeader);
    }


    @Override
    protected void
    onUnknownMessage (
        @NotNull SnapshotMessageHeader messageHeader)
    {
        this.listener.onUnknownMessage(messageHeader);
    }


    @Override
    protected void
    onOrder (
        long orderIndex,
        long totalOrderCount,
        @NotNull SnapshotMessageHeader messageHeader,
        @NotNull SnapshotSuccessResponse response,
        @NotNull AddOrder order)
    {
        this.listener.onOrder(
            orderIndex,
            totalOrderCount,
            messageHeader,
            response,
            order);
    }

    {% for msg in messages %}
    @Override
    protected void
    on{{ msg.name | pascal }} (
        @NotNull SnapshotMessageHeader messageHeader,
        @NotNull com.seedcx.marketdata.msg.{{ msg.name | pascal }} msg)
    {
        this.listener.on{{ msg.name | pascal }} (
            messageHeader,
            msg);
    }

    {% endfor %}
}
