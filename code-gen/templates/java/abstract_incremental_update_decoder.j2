/*

 ######   #######  ########  ########          ######   ######## ##    ##
##    ## ##     ## ##     ## ##               ##    ##  ##       ###   ##
##       ##     ## ##     ## ##               ##        ##       ####  ##
##       ##     ## ##     ## ######   ####### ##   #### ######   ## ## ##
##       ##     ## ##     ## ##               ##    ##  ##       ##  ####
##    ## ##     ## ##     ## ##               ##    ##  ##       ##   ###
 ######   #######  ########  ########          ######   ######## ##    ##

  Notice: This file has been generated from a template. Do not modify.

*/

package com.seedcx.marketdata;

import com.seedcx.marketdata.msg.MessageHeader;
import com.seedcx.marketdata.msg.PacketHeader;
import org.jetbrains.annotations.NotNull;

public abstract class AbstractIncrementalUpdateDecoder
{
    public
    void
    decodePacket (@NotNull Input input)
    {
        PacketHeader packetHeader = readPacketHeader(input);
        if (!onPacketHeader(packetHeader))
        {
            // Bail out early
            return;
        }

        if (packetHeader.getMessageCount() == 0)
        {
            onHeartbeat(packetHeader);
            return;
        }

        long currentSequenceNum = packetHeader.getSequenceNum();

        for (int msgNum = 0;
             msgNum < packetHeader.getMessageCount();
             ++msgNum, ++currentSequenceNum)
        {
            MessageHeader msgHeader = readMessageHeader(input);

            if (onMessageHeader(packetHeader.getInstrumentId(),
                                currentSequenceNum,
                                packetHeader,
                                msgHeader))
            {
                switch (msgHeader.getType())
                {
                {% for msg in messages %}
                case {{ msg.enum.value }}: {
                    this.on{{ msg.name | pascal }}(
                        packetHeader.getInstrumentId(),
                        currentSequenceNum,
                        packetHeader,
                        msgHeader,
                        read{{ msg.name | pascal }}(
                            msgHeader,
                            input));
                    }
                    break;
                {% endfor %}

                default: {
                    input.skipBytes(msgHeader.getMessageLength());
                    this.onUnknownMessage(
                        packetHeader.getInstrumentId(),
                        currentSequenceNum,
                        packetHeader,
                        msgHeader);
                    }
                    break;
                }
            }
            else
            {
                input.skipBytes(msgHeader.getMessageLength());
            }
        }
    }



    protected boolean
    onPacketHeader (
        @NotNull PacketHeader packetHeader)
    {
        return true;
    }

    protected void
    onHeartbeat (
        @NotNull PacketHeader packetHeader)
    {
    }

    protected boolean
    onMessageHeader (
        long instrumentId,
        long sequenceNumber,
        @NotNull PacketHeader packetHeader,
        @NotNull MessageHeader messageHeader)
    {
        return true;
    }

    protected
    void
    onUnknownMessage (
        long instrumentId,
        long sequenceNumber,
        @NotNull PacketHeader packetHeader,
        @NotNull MessageHeader messageHeader)
    {
    }

    {% for msg in messages %}
    protected
    void
    on{{ msg.name | pascal }} (
        long instrumentId,
        long sequenceNumber,
        @NotNull PacketHeader packetHeader,
        @NotNull MessageHeader messageHeader,
        @NotNull com.seedcx.marketdata.msg.{{ msg.name | pascal }} msg)
    {
    }

    {% endfor %}

    protected
    @NotNull MessageHeader
    readMessageHeader (@NotNull Input input)
    {
        MessageHeader msgHeader = MessageHeader.fromInput(input);

        int sizeDelta = msgHeader.getHeaderLength() - MessageHeader.EXPECTED_WIRE_SIZE;
        if (sizeDelta > 0)
        {
            // Looks like the header is longer. Skip over the extra bytes.
            input.skipBytes(sizeDelta);
        }
        else if (sizeDelta < 0)
        {
            throw new MessageTooShortException("Message header shorter than anticipated.");
        }
        return msgHeader;
    }

    public
    @NotNull PacketHeader
    readPacketHeader (@NotNull Input input)
    {
        PacketHeader header = PacketHeader.fromInput(input);
        int sizeDelta = header.getPacketHeaderLength() - PacketHeader.EXPECTED_WIRE_SIZE;
        if (sizeDelta > 0)
        {
            // Looks like the header is longer. Skip over the extra bytes.
            input.skipBytes(sizeDelta);
        }
        else if (sizeDelta < 0)
        {
            throw new MessageTooShortException("Packet header shorter than anticipated.");
        }
        return header;
    }

    {% for msg in messages %}
    protected
    @NotNull com.seedcx.marketdata.msg.{{ msg.name | pascal }}
    read{{ msg.name | pascal }} (
        @NotNull MessageHeader msgHeader,
        @NotNull Input input)
    {
        com.seedcx.marketdata.msg.{{ msg.name | pascal }} result = com.seedcx.marketdata.msg.{{ msg.name | pascal }}.fromInput(input);
        int sizeDelta = msgHeader.getMessageLength() - com.seedcx.marketdata.msg.{{ msg.name | pascal }}.EXPECTED_WIRE_SIZE;
        if (sizeDelta > 0)
        {
            // Looks like the message is longer. Skip over the extra bytes.
            input.skipBytes(sizeDelta);
        }
        else if (sizeDelta < 0)
        {
            throw new MessageTooShortException("{{ msg.name | pascal }} msg shorter than anticipated.");
        }
        return result;
    }

    {% endfor %}
}
